SQL_Server_Functions
Use TrainingClass
--Best practise is to specify the number of columns and rows to be shown to improve performance
select top 1000 * from [dbo].[Order]
select count(*) from [dbo].[Order]  -- 830 - Slower if many rows and columns- Checks for all columns
select count(1) from [dbo].[Order]  -- 830 - unique Values - Checks only for Primary key column

Scalar Functions
select count(*) as [Count],avg(TotalAmount) as [Avg], min(TotalAmount) as [Min], max(TotalAmount) as[Max],sum(TotalAmount) as [Sum] from [dbo].[Order]

select * into #order from [dbo].[Order] --Temp table

Checksum is a way of identifying a unique row - Data validation 
Consumed datya from the source and ensure that no value is missed.

select *, checksum(Id) as [checksum], BINARY_CHECKSUM(Id) as [binary_checksum],
checksum(TotalAmount) as [checksum], BINARY_CHECKSUM(TotalAmount) as [binary_checksum] 
from [dbo].[Order] order by TotalAmount

select checksum_agg(Id) as [checksum_agg]
from [dbo].[Order] 

select STDEV(TotalAmount) as [stdev], STDEVP(TotalAmount) as[stdevp] from [dbo].[Order] 
select var(TotalAmount) as [var], varp(TotalAmount) as[varp] from [dbo].[Order] 

select DATEFROMPARTS(2028,10,31) as [datefromparts]

SELECT DATETIMEOFFSETFROMPARTS ( 2010, 12, 31, 14, 23, 23, 0, 12, 0, 7 ) AS Result;  
STRING Functions
select * from [dbo].[Customer]
select *, upper(FirstName) as [First Name], reverse(FirstName) as [Reverse],  lower(FirstName) as [Lower]  from [dbo].[Customer]

select *, 
REVERSE(lower(upper(FirstName))) as [Reversed], LEN(FirstName) as [LENGTH] from [dbo].[Customer]

select SUBSTRING('SQL Tutorial', 1,3) as ExtractString

--CAST supports multi datatypes
select getdate()
select cast(getdate() as date)
select cast(getdate() as varchar)

-- CONVERT is not as efficient as CAST
select CONVERT(varchar, getdate(), 100) as [date_conv]
select CONVERT(varchar, getdate(), 101) as [date_conv]
select CONVERT(varchar, getdate(), 106) as [date_conv]
select CONVERT(varchar, getdate(), 120) as [date_conv]


Compare the values - if present or not
1. CASE Statement - easier to understand
2. IIF Statement
select * from [dbo].[Customer] where Country='USA'

select * 
, case 
	when Country='USA' then 'Home Country'
	when Country <> 'USA' then 'Not from Home Country'
	else 'inside else'
	end as Country_Case
,
IIF(Country='USA' ,'Home Country', 'Not from Home Country') as Country_IIF
from [dbo].[Customer]

--Trying and then cast it
select TRY_CAST(getdate() as date)

select PARSE('Monday, 13 December 2010' AS datetime2 using 'en-US') AS Result

Window Functions - They must have an over clause and order by

select Id, FirstName, 
	lag(FirstName) over (order by id) as [lag],
	lead(FirstName) over (order by id) as [lead]
	from [dbo].[Customer]


select * from
[dbo]. [Customer] C join [dbo].[Order] O
on C.Id=o.CustomerId
order by C.Id

Find out first order and subsequent order placed by the customer
select C.Id, C.FirstName, C.LastName, O.OrderDate, O.TotalAmount
,	--lag(OrderDate) over (partition by C.Id order by OrderDate) as [lag],
	lead(OrderDate) over (partition by C.Id order by OrderDate) as [lead]
	from
[dbo]. [Customer] C join [dbo].[Order] O
on C.Id=o.CustomerId

 First Order and Last Ordre placed by the customer for every row
display when customer placed first order by customer for all rows fro each customer
display when customer placed last order by customer for all rows fro each customer
select C.Id, C.FirstName, C.LastName, O.OrderDate, O.TotalAmount
,	--lag(OrderDate) over (partition by C.Id order by OrderDate) as [lag],
	FIRST_VALUE(OrderDate) over (partition by C.Id order by OrderDate) as [lead],
	LAST_VALUE(OrderDate) over (partition by C.Id order by OrderDate) as [lead]
	from
[dbo]. [Customer] C join [dbo].[Order] O
on C.Id=o.CustomerId

unbounded Preceding - Rows present abouve above current row
 Current
Unbounded Following - 

select C.Id, C.FirstName, C.LastName, O.OrderDate,
	lead(OrderDate) over (partition by C.Id order by OrderDate) as [lead],
	FIRST_VALUE(OrderDate) over (partition by C.Id order by OrderDate) as [first],
	LAST_VALUE(OrderDate) 
		over (partition by C.Id order by OrderDate 
	rows between unbounded preceding and unbounded following) as [last_values]

	from [dbo]. [Customer] C join [dbo].[Order] O
on C.Id=o.CustomerId

select *
, CONCAT(FirstName,LastName) as [FullName] from [dbo].[Customer] 

select *
, CONCAT_WS('--',FirstName,LastName) as [FullName] from [dbo].[Customer] 

--REPLACE
select REPLACE('SQL is interesting', 'interesting','Fun')
-ASCII
select ASCII('a'), ASCII('A')

-- Find out the ASCII value of third character in the firstname 

select FirstName, SUBSTRING(FirstName,3,1),(ASCII(SUBSTRING(FirstName,3,1)))
AS
ASCII_VALUE_OF_FYRSTNAME
from [dbo].[Customer] 


---
--CREATE TABLE #Cars
--(
--id INT,
--name VARCHAR(50) NOT NULL,
--company VARCHAR(50) NOT NULL,
--power INT NOT NULL
--)

--INSERT INTO #Cars
--VALUES
--(1, 'Corrolla', 'Toyota', 1800),
--(2, 'City', 'Honda', 1500),
--(3, 'C200', 'Mercedez', 2000),
--(4, 'Vitz', 'Toyota', 1300),
--(5, 'Baleno', 'Suzuki', 1500),
--(6, 'C500', 'Mercedez', 5000),
--(7, '800', 'BMW', 8000),
--(8, 'Mustang', 'Ford', 5000),
--(9, '208', 'Peugeot', 5400),
--(10, 'Prius', 'Toyota', 3200),
--(11, 'Atlas', 'Volkswagen', 5000),
--(12, '110', 'Bugatti', 8000),
--(13, 'Landcruiser', 'Toyota', 3000),
--(14, 'Civic', 'Honda', 1800),
--(15, 'Accord', 'Honda', 2000)
--(16, 'Galardo', 'Lamborgini', 8000)

select *
, rank() over(order by [power] desc) as [rank] 
, dense_rank() over(order by [power] desc) as [dense_rank] 
, row_number() over(order by [power] desc) as [row_num] 
, rank() over(partition by company  order by [power] desc) as [partition_rank] 
, dense_rank() over(partition by company  order by [power] desc) as [partition_dense_rank] 
, row_number() over(partition by company order by [power] desc) as [partition_row_num], 
, ntile(7) over( order by [power] desc) as [ntile]
from #Cars
create function cubed (@id int)
returns int as 
begin
    return power(@id,3) 
end;

CREATE FUNCTION [getCustomerInfo] (@Id int)
RETURNS TABLE AS
RETURN (select * from [dbo].[Customer] where Id = @Id)
CREATE FUNCTION [database_name].function_name (parameters)
RETURNS @Table TABLE ()  AS
BEGIN 
    INSERT INTO @Table 
    select statement 
    RETURN
END
