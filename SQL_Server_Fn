SQL_Server_Functions
Use TrainingClass
--Best practise is to specify the number of columns and rows to be shown to improve performance
select top 1000 * from [dbo].[Order]
select count(*) from [dbo].[Order]  -- 830 - Slower if many rows and columns- Checks for all columns
select count(1) from [dbo].[Order]  -- 830 - unique Values - Checks only for Primary key column

Scalar Functions
select count(*) as [Count],avg(TotalAmount) as [Avg], min(TotalAmount) as [Min], max(TotalAmount) as[Max],sum(TotalAmount) as [Sum] from [dbo].[Order]

select * into #order from [dbo].[Order] --Temp table

Checksum is a way of identifying a unique row - Data validation 
Consumed datya from the source and ensure that no value is missed.

select *, checksum(Id) as [checksum], BINARY_CHECKSUM(Id) as [binary_checksum],
checksum(TotalAmount) as [checksum], BINARY_CHECKSUM(TotalAmount) as [binary_checksum] 
from [dbo].[Order] order by TotalAmount

select checksum_agg(Id) as [checksum_agg]
from [dbo].[Order] 

select STDEV(TotalAmount) as [stdev], STDEVP(TotalAmount) as[stdevp] from [dbo].[Order] 
select var(TotalAmount) as [var], varp(TotalAmount) as[varp] from [dbo].[Order] 

select DATEFROMPARTS(2028,10,31) as [datefromparts]

SELECT DATETIMEOFFSETFROMPARTS ( 2010, 12, 31, 14, 23, 23, 0, 12, 0, 7 ) AS Result;  
STRING Functions
select * from [dbo].[Customer]
select *, upper(FirstName) as [First Name], reverse(FirstName) as [Reverse],  lower(FirstName) as [Lower]  from [dbo].[Customer]

select *, 
REVERSE(lower(upper(FirstName))) as [Reversed], LEN(FirstName) as [LENGTH] from [dbo].[Customer]

select SUBSTRING('SQL Tutorial', 1,3) as ExtractString

--CAST supports multi datatypes
select getdate()
select cast(getdate() as date)
select cast(getdate() as varchar)

-- CONVERT is not as efficient as CAST
select CONVERT(varchar, getdate(), 100) as [date_conv]
select CONVERT(varchar, getdate(), 101) as [date_conv]
select CONVERT(varchar, getdate(), 106) as [date_conv]
select CONVERT(varchar, getdate(), 120) as [date_conv]


Compare the values - if present or not
1. CASE Statement - easier to understand
2. IIF Statement
select * from [dbo].[Customer] where Country='USA'

select * 
, case 
	when Country='USA' then 'Home Country'
	when Country <> 'USA' then 'Not from Home Country'
	else 'inside else'
	end as Country_Case
,
IIF(Country='USA' ,'Home Country', 'Not from Home Country') as Country_IIF
from [dbo].[Customer]

--Trying and then cast it
select TRY_CAST(getdate() as date)

select PARSE('Monday, 13 December 2010' AS datetime2 using 'en-US') AS Result

Window Functions - They must have an over clause and order by

select Id, FirstName, 
	lag(FirstName) over (order by id) as [lag],
	lead(FirstName) over (order by id) as [lead]
	from [dbo].[Customer]


select * from
[dbo]. [Customer] C join [dbo].[Order] O
on C.Id=o.CustomerId
order by C.Id

Find out first order and subsequent order placed by the customer
select C.Id, C.FirstName, C.LastName, O.OrderDate, O.TotalAmount
,	--lag(OrderDate) over (partition by C.Id order by OrderDate) as [lag],
	lead(OrderDate) over (partition by C.Id order by OrderDate) as [lead]
	from
[dbo]. [Customer] C join [dbo].[Order] O
on C.Id=o.CustomerId

 First Order and Last Ordre placed by the customer for every row
display when customer placed first order by customer for all rows fro each customer
display when customer placed last order by customer for all rows fro each customer
select C.Id, C.FirstName, C.LastName, O.OrderDate, O.TotalAmount
,	--lag(OrderDate) over (partition by C.Id order by OrderDate) as [lag],
	FIRST_VALUE(OrderDate) over (partition by C.Id order by OrderDate) as [lead],
	LAST_VALUE(OrderDate) over (partition by C.Id order by OrderDate) as [lead]
	from
[dbo]. [Customer] C join [dbo].[Order] O
on C.Id=o.CustomerId

unbounded Preceding - Rows present abouve above current row
 Current
Unbounded Following - 

select C.Id, C.FirstName, C.LastName, O.OrderDate,
	lead(OrderDate) over (partition by C.Id order by OrderDate) as [lead],
	FIRST_VALUE(OrderDate) over (partition by C.Id order by OrderDate) as [first],
	LAST_VALUE(OrderDate) 
		over (partition by C.Id order by OrderDate 
	rows between unbounded preceding and unbounded following) as [last_values]

	from [dbo]. [Customer] C join [dbo].[Order] O
on C.Id=o.CustomerId

select *
, CONCAT(FirstName,LastName) as [FullName] from [dbo].[Customer] 

select *
, CONCAT_WS('--',FirstName,LastName) as [FullName] from [dbo].[Customer] 

--REPLACE
select REPLACE('SQL is interesting', 'interesting','Fun')
-ASCII
select ASCII('a'), ASCII('A')

-- Find out the ASCII value of third character in the firstname 

select FirstName, SUBSTRING(FirstName,3,1),(ASCII(SUBSTRING(FirstName,3,1)))
AS
ASCII_VALUE_OF_FYRSTNAME
from [dbo].[Customer] 


------------------Second Part--------------------------------
--Mathematical functions----------
--select LOG(2), LOG10(2)
--select square(square(2))
--select abs(4), abs(-4), abs(-11.00)
--select ceiling(11.6) --12
--select ceiling(11.4), ceiling(11.01)
--select floor(11.6), floor(11.4)
--select round(12.567890,2),round(12.567890,1)
--select power(2,3),power(4.2,3)
--select day(getdate())
--select DATEADD(year,5,getdate())
--select DATEADD(month,5,getdate())
--select DATEDIFF(day,'2023-07-05 19:02:34.300', getdate())
--select DATEDIFF(month,'2023-07-05 19:02:34.300', getdate())
--select datepart(day,getdate()), datepart(QQ,getdate()) as [QUARTER], datepart(QQ,getdate()+120),datepart(DY,getdate()) AS [DAY],datepart(DW,getdate())

--RANK FUNCTIONS-assigning value based on criteria
--rank - Will skip rankings
CREATE TABLE #Cars
(
id INT,
name VARCHAR(50) NOT NULL,
company VARCHAR(50) NOT NULL,
power INT NOT NULL
)

INSERT INTO #Cars
VALUES
(1, 'Corrolla', 'Toyota', 1800),
(2, 'City', 'Honda', 1500),
(3, 'C200', 'Mercedez', 2000),
(4, 'Vitz', 'Toyota', 1300),
(5, 'Baleno', 'Suzuki', 1500),
(6, 'C500', 'Mercedez', 5000),
(7, '800', 'BMW', 8000),
(8, 'Mustang', 'Ford', 5000),
(9, '208', 'Peugeot', 5400),
(10, 'Prius', 'Toyota', 3200),
(11, 'Atlas', 'Volkswagen', 5000),
(12, '110', 'Bugatti', 8000),
(13, 'Landcruiser', 'Toyota', 3000),
(14, 'Civic', 'Honda', 1800),
(15, 'Accord', 'Honda', 2000),
(16, 'Galardo', 'Lamborgini', 8000)

select * from #Cars

select *
, rank() over(order by [power] desc) as [rank]
, dense_rank() over(order by [power] desc) as [dense_rank]
, row_number() over(order by [power] desc) as [row_num]
, rank() over(partition by company order by [power] desc) as [partition_rank]
, dense_rank() over(partition by company order by [power] desc) as [partition_dense__rank]
, row_number() over(partition by company order by [power] desc) as [partition_row_number_rank]
,ntile(17) over(order by [power] desc) as [ntile]
from #Cars

--USER DEFINED FUNCTIONS
--SCALAR VALUED - Returns only one value
CREATE FUNCTION cubed (@id int)
RETURNS int AS
BEGIN
	return power(@id,4)
	
END

--Execute the function
select dbo.cubed(3)

--Create a function that will take any string value and converts all the characters to lower except first character ABCDE-Abcde

--INLINE TABLE VALUED FUNCTION - Returns a table
select * from dbo.Customer where Id=1

CREATE FUNCTION [getCustomerInfo] (@id int)
RETURNS TABLE AS
	return(select * from [dbo].[Customer] where Id=@id)

select * from [getCustomerInfo](1)

--MULTI-TABLED VALUED FUNCTION - Returns a table
CREATE FUNCTION [database_name].function_name (parameters)
RETURNS @Table TABLE() AS
BEGIN
	INSERT INTO @Table
	select statement
	RETURN
END

-- 
select STUFF('Foxit', 4,2,'tv')
select STUFF('abcdef',2,3,'ijklmn');
select Id,FirstName,stuff(FirstName,2,3,'000') from [dbo].[Customer]

--VIEWS--Virtual Table----
Create View [vWCustomer_info]
as 
select Id,FirstName from [dbo].[Customer]

Alter View [vWCustomer_info]
as 
select Id,FirstName,City,Country from [dbo].[Customer]

select * from vWCustomer_info

--Materialised Views - if we create an index on the views then the view will no longer be virtual

--STORED PROCEDURES -- STORED PROC - SP - Faster as the piece of code is executed and the execution plan is stored
--Prepared SQL Code that can be stored and used

select * from [dbo].[Customer]
select * from [dbo].[Order]

-- Create a Stored Proc to find the total Sum spent by the customer  
CREATE PROCEDURE 
spCustomerorderInfo as
select C.Id, min(FirstName) as [FN], min(LastName) as [LN], sum(TotalAmount) as [sum]
from [dbo].[Customer] C join [dbo].[Order] O
on C.Id=O.CustomerID
group by C.Id
order by [sum] desc

--Execute a Stored Procedure in 3 ways
exec spCustomerorderInfo
spCustomerorderInfo
execute spCustomerorderInfo

ALTER PROCEDURE 
spCustomerorderInfo as
select C.Id, min(FirstName) as [FN], min(LastName) as [LN], sum(TotalAmount) as [sum]
from [dbo].[Customer] C join [dbo].[Order] O
on C.Id=O.CustomerID
group by C.Id


-- BuiltIn stored Procedure
sp_spaceused '[dbo].[Customer]'
sp_helptext '[dbo].[spCustomerorderInfo]'

--Output Stored Procedure - Returns some value

CREATE PROCEDURE spGetCustomerorderInfo
@Id int
AS
select C.Id, min(FirstName) as [FN], min(LastName) as [LN], sum(TotalAmount) as [sum]
from [dbo].[Customer] C join [dbo].[Order] O
on C.Id=O.CustomerID
where C.Id=@Id
group by C.Id

exec spGetCustomerorderInfo 1

---Functions, Views, SP
--Functions and Views are run suing the select statement
select dbo.cubed(3) --Scalar Function
select * from [getCustomerInfo](2)--inline table valued function
select * from vWCustomer_info --View

exec [dbo].[spCustomerorderInfo]

--Temp Table is for Adhoc Analysis and it can be dropped 


---CTE - Common Table Expressions ---Method used to query the data only
--1. Declaring a CTE
--2. Select a CTE/querying
--execute both together

with cte as
(select C.Id, min(FirstName) as [FN], min(LastName) as [LN], sum(TotalAmount) as [sum]
from [dbo].[Customer] C join [dbo].[Order] O
on C.Id=O.CustomerID
group by C.Id)

select * from cte order by [sum] desc
	
--Multiple CTE's can also be added, with each CTE having a transformation
with cte as
(select C.Id, min(FirstName) as FirstName, min(LastName) as LastName, sum(TotalAmount) as [sum]
from [dbo].[Customer] C join [dbo].[Order] O
on C.Id=O.CustomerID
group by C.Id)

,cte2 as (select Id, Upper(FirstName) FirstName, Upper(LastName) Lastname, [SUM]  from cte)
--,cte3 as (select * from cte)
--,cte4 as ()
select * from cte2 order by [sum] desc
